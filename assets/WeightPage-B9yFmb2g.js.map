{"version":3,"file":"WeightPage-B9yFmb2g.js","sources":["../../src/modules/weight/components/WeightConversionTool.tsx","../../src/shared/hooks/useNotifications.ts","../../src/modules/weight/pages/WeightPage.tsx"],"sourcesContent":["import { useState } from 'react'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/shared/ui/card'\r\nimport { Button } from '@/shared/ui/button'\r\nimport { Badge } from '@/shared/ui/badge'\r\nimport { AlertTriangle, RefreshCw, CheckCircle, Info } from 'lucide-react'\r\nimport { useWeightStore } from '../store'\r\nimport { useWeightActions } from '../hooks/useWeightActions'\r\nimport { WeightEntry, kgToLbs, lbsToKg } from '../types'\r\n\r\ninterface ConversionCandidate {\r\n  entry: WeightEntry\r\n  currentDisplayLbs: number\r\n  suggestedLbs: number\r\n  needsConversion: boolean\r\n}\r\n\r\nexport function WeightConversionTool() {\r\n  const { weights } = useWeightStore()\r\n  const { updateWeight } = useWeightActions()\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\r\n  const [isConverting, setIsConverting] = useState(false)\r\n  const [candidates, setCandidates] = useState<ConversionCandidate[]>([])\r\n  const [showTool, setShowTool] = useState(false)\r\n\r\n  const analyzeEntries = () => {\r\n    setIsAnalyzing(true)\r\n    \r\n    // Analyze entries to find potential kg values stored as lbs\r\n    const conversionCandidates: ConversionCandidate[] = weights.map(entry => {\r\n      const currentDisplayLbs = kgToLbs(entry.kg)\r\n      \r\n      // If the stored kg value is suspiciously high (likely entered as lbs)\r\n      // Typical adult weight ranges: 40-200kg (88-440lbs)\r\n      // If stored kg > 200, it's likely lbs entered as kg\r\n      const needsConversion = entry.kg > 200 || (entry.kg > 100 && entry.kg < 200 && entry.kg % 1 !== 0)\r\n      const suggestedLbs = needsConversion ? entry.kg : currentDisplayLbs\r\n      \r\n      return {\r\n        entry,\r\n        currentDisplayLbs,\r\n        suggestedLbs,\r\n        needsConversion\r\n      }\r\n    }).filter(candidate => candidate.needsConversion)\r\n\r\n    setCandidates(conversionCandidates)\r\n    setIsAnalyzing(false)\r\n  }\r\n\r\n  const convertEntry = async (candidate: ConversionCandidate) => {\r\n    try {\r\n      // Convert the stored kg value (which was likely entered as lbs) to proper kg\r\n      const correctKg = lbsToKg(candidate.suggestedLbs)\r\n      await updateWeight(candidate.entry.id, { kg: correctKg })\r\n      \r\n      // Remove from candidates list\r\n      setCandidates(prev => prev.filter(c => c.entry.id !== candidate.entry.id))\r\n    } catch (error) {\r\n      console.error('Failed to convert entry:', error)\r\n    }\r\n  }\r\n\r\n  const convertAllEntries = async () => {\r\n    setIsConverting(true)\r\n    \r\n    try {\r\n      for (const candidate of candidates) {\r\n        await convertEntry(candidate)\r\n        // Small delay to avoid overwhelming the system\r\n        await new Promise(resolve => setTimeout(resolve, 100))\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to convert entries:', error)\r\n    } finally {\r\n      setIsConverting(false)\r\n    }\r\n  }\r\n\r\n  const formatDate = (dateISO: string) => {\r\n    return new Date(dateISO).toLocaleDateString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      year: 'numeric',\r\n    })\r\n  }\r\n\r\n  if (!showTool) {\r\n    return (\r\n      <Card className=\"cyber-card border-yellow-500/30\">\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Info className=\"h-5 w-5 text-yellow-400\" />\r\n              <div>\r\n                <h3 className=\"font-medium text-yellow-400\">Weight Unit Conversion</h3>\r\n                <p className=\"text-sm text-gray-400\">\r\n                  Check if any entries need kg → lbs conversion\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => setShowTool(true)}\r\n              className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\r\n            >\r\n              Check Entries\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card className=\"cyber-card border-yellow-500/50\">\r\n      <CardHeader>\r\n        <CardTitle className=\"cyber-subtitle flex items-center gap-2 text-yellow-400\">\r\n          <RefreshCw className=\"cyber-icon h-5 w-5\" />\r\n          Weight Conversion Tool\r\n        </CardTitle>\r\n        <p className=\"text-sm text-gray-400\">\r\n          This tool helps fix weight entries that may have been entered in the wrong unit.\r\n          If you previously entered weights in pounds but they were stored as kilograms, this will correct them.\r\n        </p>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {candidates.length === 0 && !isAnalyzing && (\r\n          <div className=\"text-center py-6\">\r\n            <Button\r\n              onClick={analyzeEntries}\r\n              variant=\"outline\"\r\n              className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\r\n              disabled={isAnalyzing}\r\n            >\r\n              <RefreshCw className={`mr-2 h-4 w-4 ${isAnalyzing ? 'animate-spin' : ''}`} />\r\n              {isAnalyzing ? 'Analyzing...' : 'Analyze Entries'}\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        {candidates.length > 0 && (\r\n          <>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\r\n                <span className=\"text-sm font-medium text-yellow-400\">\r\n                  Found {candidates.length} entries that may need conversion\r\n                </span>\r\n              </div>\r\n              <Button\r\n                onClick={convertAllEntries}\r\n                variant=\"cyber-ki\"\r\n                size=\"sm\"\r\n                disabled={isConverting}\r\n              >\r\n                {isConverting ? 'Converting...' : 'Convert All'}\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"space-y-2 max-h-60 overflow-y-auto\">\r\n              {candidates.map((candidate) => (\r\n                <div\r\n                  key={candidate.entry.id}\r\n                  className=\"cyber-card bg-gray-900/50 p-3 rounded-lg\"\r\n                >\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <div className=\"text-sm\">\r\n                        <div className=\"font-mono text-gray-300\">\r\n                          {formatDate(candidate.entry.dateISO)}\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2 mt-1\">\r\n                          <Badge variant=\"outline\" className=\"text-red-400 border-red-500/50\">\r\n                            Current: {candidate.currentDisplayLbs.toFixed(1)}lbs\r\n                          </Badge>\r\n                          <span className=\"text-gray-500\">→</span>\r\n                          <Badge variant=\"outline\" className=\"text-ki-green border-ki-green/50\">\r\n                            Fixed: {candidate.suggestedLbs.toFixed(1)}lbs\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <Button\r\n                      onClick={() => convertEntry(candidate)}\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      className=\"border-ki-green/50 text-ki-green hover:bg-ki-green/10\"\r\n                    >\r\n                      <CheckCircle className=\"mr-1 h-3 w-3\" />\r\n                      Fix\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {candidates.length === 0 && isAnalyzing && (\r\n          <div className=\"text-center py-6\">\r\n            <RefreshCw className=\"h-8 w-8 animate-spin text-yellow-400 mx-auto mb-2\" />\r\n            <p className=\"text-sm text-gray-400\">Analyzing weight entries...</p>\r\n          </div>\r\n        )}\r\n\r\n        {candidates.length === 0 && !isAnalyzing && weights.length > 0 && (\r\n          <div className=\"text-center py-6\">\r\n            <CheckCircle className=\"h-8 w-8 text-ki-green mx-auto mb-2\" />\r\n            <p className=\"text-sm text-ki-green font-medium\">All entries look correct!</p>\r\n            <p className=\"text-xs text-gray-400 mt-1\">No conversion needed</p>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex justify-between items-center pt-2 border-t border-gray-700\">\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => setShowTool(false)}\r\n            className=\"text-gray-400 hover:bg-gray-800\"\r\n          >\r\n            Hide Tool\r\n          </Button>\r\n          <div className=\"text-xs text-gray-500\">\r\n            {weights.length} total entries • {candidates.length} need conversion\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n} ","import { useState, useEffect } from 'react'\r\n\r\ninterface NotificationHook {\r\n  permission: NotificationPermission\r\n  isSupported: boolean\r\n  requestPermission: () => Promise<NotificationPermission>\r\n  scheduleDailyReminder: () => void\r\n  clearDailyReminder: () => void\r\n}\r\n\r\nconst REMINDER_TIMEOUT_KEY = 'perfect-zenkai-reminder-timeout'\r\n\r\nexport function useNotifications(): NotificationHook {\r\n  const [permission, setPermission] =\r\n    useState<NotificationPermission>('default')\r\n  const [isSupported] = useState(() => 'Notification' in window)\r\n\r\n  useEffect(() => {\r\n    if (isSupported) {\r\n      setPermission(Notification.permission)\r\n    }\r\n  }, [isSupported])\r\n\r\n  const requestPermission = async (): Promise<NotificationPermission> => {\r\n    if (!isSupported) {\r\n      return 'denied'\r\n    }\r\n\r\n    try {\r\n      const result = await Notification.requestPermission()\r\n      setPermission(result)\r\n      return result\r\n    } catch (error) {\r\n      console.error('Error requesting notification permission:', error)\r\n      return 'denied'\r\n    }\r\n  }\r\n\r\n  const getTimeUntilNext9AM = (): number => {\r\n    const now = new Date()\r\n    const next9AM = new Date()\r\n\r\n    // Set to 9 AM today\r\n    next9AM.setHours(9, 0, 0, 0)\r\n\r\n    // If it's already past 9 AM today, set to 9 AM tomorrow\r\n    if (now >= next9AM) {\r\n      next9AM.setDate(next9AM.getDate() + 1)\r\n    }\r\n\r\n    return next9AM.getTime() - now.getTime()\r\n  }\r\n\r\n  const checkIfWeightLoggedToday = (): boolean => {\r\n    // This would typically check the weight store\r\n    // For now, we'll implement a simple check\r\n    const today = new Date().toISOString().split('T')[0]\r\n\r\n    // Check if there's a weight entry for today in localStorage\r\n    // This is a simplified implementation - in a real app you'd check the actual store\r\n    const hasWeightToday = localStorage.getItem(`weight-logged-${today}`)\r\n    return hasWeightToday === 'true'\r\n  }\r\n\r\n  const sendDailyReminder = () => {\r\n    if (permission !== 'granted') {\r\n      return\r\n    }\r\n\r\n    // Don't send if weight already logged today\r\n    if (checkIfWeightLoggedToday()) {\r\n      return\r\n    }\r\n\r\n    // Skip weekends (optional feature mentioned in requirements)\r\n    const today = new Date().getDay()\r\n    if (today === 0 || today === 6) {\r\n      // Sunday = 0, Saturday = 6\r\n      return\r\n    }\r\n\r\n    const notification = new Notification('Time to weigh in', {\r\n      body: 'Track your weight to stay on top of your health goals',\r\n      icon: '/icons/logo192.png',\r\n      tag: 'daily-weight-reminder',\r\n      requireInteraction: false,\r\n      data: {\r\n        url: '/weight',\r\n      },\r\n    })\r\n\r\n    notification.onclick = (event) => {\r\n      event.preventDefault()\r\n      window.focus()\r\n      // Navigate to weight page\r\n      window.location.href = '/weight'\r\n      notification.close()\r\n    }\r\n\r\n    // Auto-close after 10 seconds\r\n    setTimeout(() => {\r\n      notification.close()\r\n    }, 10000)\r\n  }\r\n\r\n  const scheduleDailyReminder = () => {\r\n    if (permission !== 'granted') {\r\n      return\r\n    }\r\n\r\n    // Clear any existing timeout\r\n    clearDailyReminder()\r\n\r\n    const timeUntil9AM = getTimeUntilNext9AM()\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      sendDailyReminder()\r\n      // Schedule the next reminder (24 hours later)\r\n      scheduleDailyReminder()\r\n    }, timeUntil9AM)\r\n\r\n    // Store the timeout ID so we can clear it later\r\n    localStorage.setItem(REMINDER_TIMEOUT_KEY, timeoutId.toString())\r\n  }\r\n\r\n  const clearDailyReminder = () => {\r\n    const timeoutId = localStorage.getItem(REMINDER_TIMEOUT_KEY)\r\n    if (timeoutId) {\r\n      clearTimeout(parseInt(timeoutId))\r\n      localStorage.removeItem(REMINDER_TIMEOUT_KEY)\r\n    }\r\n  }\r\n\r\n  // Clean up timeout on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      clearDailyReminder()\r\n    }\r\n  }, [])\r\n\r\n  return {\r\n    permission,\r\n    isSupported,\r\n    requestPermission,\r\n    scheduleDailyReminder,\r\n    clearDailyReminder,\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeightStore } from '../store'\r\nimport { WeightRow } from '../components/WeightRow'\r\nimport { WeightEntryForm } from '../components/WeightEntryForm'\r\nimport { WeightAnalytics } from '../components/WeightAnalytics'\r\nimport { WeightGoalForm } from '../components/WeightGoalForm'\r\nimport { WeightConversionTool } from '../components/WeightConversionTool'\r\nimport { useNotifications } from '@/shared/hooks/useNotifications'\r\nimport { ListSkeleton } from '@/shared/ui/skeleton'\r\nimport { Button } from '@/shared/ui/button'\r\nimport { Scale, Target, TrendingUp, Plus } from 'lucide-react'\r\nimport { kgToLbs } from '../types'\r\n\r\nconst NOTIFICATION_REQUEST_KEY = 'perfect-zenkai-notification-requested'\r\n\r\nexport default function WeightPage() {\r\n  const { weights, activeGoal, loadWeights, loadActiveGoal, isLoading } = useWeightStore()\r\n  const { permission, isSupported, requestPermission, scheduleDailyReminder } =\r\n    useNotifications()\r\n  const [showGoalForm, setShowGoalForm] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (weights.length === 0) {\r\n      loadWeights()\r\n    }\r\n    if (!activeGoal) {\r\n      loadActiveGoal()\r\n    }\r\n  }, [weights.length, loadWeights, activeGoal, loadActiveGoal])\r\n\r\n  useEffect(() => {\r\n    // Request notification permission on first visit to weight page\r\n    const hasRequestedBefore = localStorage.getItem(NOTIFICATION_REQUEST_KEY)\r\n\r\n    if (isSupported && permission === 'default' && !hasRequestedBefore) {\r\n      // Small delay to let the page load first\r\n      const timer = setTimeout(async () => {\r\n        const result = await requestPermission()\r\n        localStorage.setItem(NOTIFICATION_REQUEST_KEY, 'true')\r\n\r\n        if (result === 'granted') {\r\n          scheduleDailyReminder()\r\n        }\r\n      }, 2000)\r\n\r\n      return () => clearTimeout(timer)\r\n    } else if (permission === 'granted') {\r\n      // Ensure daily reminder is scheduled if permission already granted\r\n      scheduleDailyReminder()\r\n    }\r\n  }, [isSupported, permission, requestPermission, scheduleDailyReminder])\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 pb-24 pt-4\">\r\n      {/* Cyber-styled header */}\r\n      <div className=\"mb-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"cyber-title gradient-text-ki mb-2\">WEIGHT TRACKING</h1>\r\n            <p className=\"font-mono text-sm text-gray-400\">\r\n              Progress monitoring system • {weights.length} entries logged\r\n            </p>\r\n          </div>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setShowGoalForm(!showGoalForm)}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <Target className=\"h-4 w-4\" />\r\n            {activeGoal ? 'Edit Goal' : 'Set Goal'}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Weight Entry Form - Always visible */}\r\n      <WeightEntryForm />\r\n\r\n      {/* Weight Goal Form - Show when requested */}\r\n      {showGoalForm && (\r\n        <div className=\"mb-6\">\r\n          <WeightGoalForm onClose={() => setShowGoalForm(false)} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Weight Conversion Tool - Show when there are entries */}\r\n      {weights.length > 0 && !isLoading && (\r\n        <div className=\"mb-6\">\r\n          <WeightConversionTool />\r\n        </div>\r\n      )}\r\n\r\n      {/* Weight Analytics - Show when there are entries */}\r\n      {weights.length > 0 && !isLoading && (\r\n        <WeightAnalytics />\r\n      )}\r\n\r\n      {/* Loading state with skeleton */}\r\n      {isLoading && (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"cyber-card p-4\">\r\n            <div className=\"mb-4 flex items-center gap-3\">\r\n              <div className=\"shimmer h-8 w-8 rounded-full bg-gray-700\"></div>\r\n              <div>\r\n                <div className=\"shimmer mb-2 h-4 w-24 rounded bg-gray-700\"></div>\r\n                <div className=\"shimmer h-3 w-16 rounded bg-gray-700\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <ListSkeleton count={5} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Enhanced empty state */}\r\n      {!isLoading && weights.length === 0 && (\r\n        <div className=\"py-16 text-center\">\r\n          <div className=\"cyber-card mx-auto max-w-md\">\r\n            <div className=\"flex flex-col items-center space-y-6\">\r\n              {/* Animated icon */}\r\n              <div className=\"relative\">\r\n                <div className=\"flex h-20 w-20 items-center justify-center rounded-xl border border-gray-700 bg-gray-900\">\r\n                  <Scale className=\"text-ki-green cyber-icon h-10 w-10 animate-pulse\" />\r\n                </div>\r\n                <div className=\"bg-hyper-magenta absolute -right-2 -top-2 flex h-6 w-6 items-center justify-center rounded-full\">\r\n                  <Plus className=\"h-4 w-4 text-white\" />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Title and description */}\r\n              <div className=\"space-y-3\">\r\n                <h3 className=\"cyber-subtitle text-gray-300\">\r\n                  Begin Weight Journey\r\n                </h3>\r\n                <p className=\"font-mono text-sm leading-relaxed text-gray-500\">\r\n                  Track your progress with precision.\r\n                  <br />\r\n                  Every entry brings you closer to your goal.\r\n                </p>\r\n              </div>\r\n\r\n              {/* Action button */}\r\n              <Button\r\n                variant=\"cyber-ki\"\r\n                onClick={() => {\r\n                  const input = document.getElementById('weight-quick')\r\n                  if (input) {\r\n                    input.focus()\r\n                  }\r\n                }}\r\n                className=\"w-full\"\r\n              >\r\n                <Scale className=\"mr-2 h-4 w-4\" />\r\n                LOG FIRST WEIGHT\r\n              </Button>\r\n\r\n              {/* Features preview */}\r\n              <div className=\"mt-6 grid w-full grid-cols-2 gap-4 border-t border-gray-700 pt-6\">\r\n                <div className=\"text-center\">\r\n                  <TrendingUp className=\"text-plasma-cyan cyber-icon mx-auto mb-2 h-6 w-6\" />\r\n                  <div className=\"font-mono text-xs text-gray-400\">\r\n                    Trend Analysis\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <Target className=\"text-hyper-magenta cyber-icon mx-auto mb-2 h-6 w-6\" />\r\n                  <div className=\"font-mono text-xs text-gray-400\">\r\n                    Goal Tracking\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n\r\n\r\n      {/* Weight entries list */}\r\n      {!isLoading && weights.length > 0 && (\r\n        <div className=\"space-y-3\">\r\n          {/* Summary stats */}\r\n          <div className=\"cyber-card mb-6 p-4\">\r\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\r\n              <div>\r\n                <div className=\"gradient-text-ki metric-display text-lg font-bold\">\r\n                  {weights.length}\r\n                </div>\r\n                <div className=\"font-mono text-xs text-gray-400\">Entries</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"gradient-text-cyan metric-display text-lg font-bold\">\r\n                  {weights[0] ? kgToLbs(weights[0].kg).toFixed(1) : 0}lbs\r\n                </div>\r\n                <div className=\"font-mono text-xs text-gray-400\">Latest</div>\r\n              </div>\r\n              <div>\r\n                <div className=\"gradient-text-magenta metric-display text-lg font-bold\">\r\n                  {Math.max(...weights.map((w) => w.kg)) -\r\n                    Math.min(...weights.map((w) => w.kg)) >=\r\n                  0.1\r\n                    ? `${kgToLbs(Math.max(...weights.map((w) => w.kg)) - Math.min(...weights.map((w) => w.kg))).toFixed(1)}lbs`\r\n                    : '0lbs'}\r\n                </div>\r\n                <div className=\"font-mono text-xs text-gray-400\">Range</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Weight entries */}\r\n          <div className=\"space-y-3\">\r\n            <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Weight Entries ({weights.length})</h3>\r\n            {weights.map((w) => (\r\n              <WeightRow key={w.id} entry={w} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"],"names":["WeightConversionTool","weights","useWeightStore","updateWeight","useWeightActions","isAnalyzing","setIsAnalyzing","useState","isConverting","setIsConverting","candidates","setCandidates","showTool","setShowTool","convertEntry","async","candidate","correctKg","lbsToKg","suggestedLbs","entry","id","kg","prev","filter","c","error","jsxDEV","Card","className","children","CardHeader","CardTitle","RefreshCw","fileName","lineNumber","columnNumber","this","CardContent","length","jsxDevRuntimeExports","Button","onClick","conversionCandidates","map","currentDisplayLbs","kgToLbs","needsConversion","variant","disabled","Fragment","AlertTriangle","Promise","resolve","setTimeout","size","dateISO","Date","toLocaleDateString","month","day","year","Badge","toFixed","CheckCircle","Info","REMINDER_TIMEOUT_KEY","useNotifications","permission","setPermission","isSupported","window","useEffect","Notification","sendDailyReminder","today","toISOString","split","localStorage","getItem","checkIfWeightLoggedToday","getDay","notification","body","icon","tag","requireInteraction","data","url","onclick","event","preventDefault","focus","location","href","close","scheduleDailyReminder","clearDailyReminder","timeUntil9AM","now","next9AM","setHours","setDate","getDate","getTime","getTimeUntilNext9AM","timeoutId","setItem","toString","clearTimeout","parseInt","removeItem","requestPermission","result","NOTIFICATION_REQUEST_KEY","WeightPage","activeGoal","loadWeights","loadActiveGoal","isLoading","showGoalForm","setShowGoalForm","hasRequestedBefore","timer","Target","WeightEntryForm","WeightGoalForm","onClose","WeightAnalytics","ListSkeleton","count","Scale","Plus","input","document","getElementById","TrendingUp","Math","max","w","min","WeightRow"],"mappings":"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"}