---
description: 
globs: 
alwaysApply: true
---
# Architecture Standards

## Vertical Slice Architecture

**Every feature MUST be implemented as a complete vertical slice:**

### Slice Components (All Required)
```
Feature Slice:
â”œâ”€â”€ ðŸŽ¨ UI Layer (React components)
â”œâ”€â”€ ðŸ§  Business Logic (hooks, services)
â”œâ”€â”€ ðŸ’¾ Data Layer (stores, API calls)
â”œâ”€â”€ ðŸ”§ Type Safety (TypeScript interfaces)
â””â”€â”€ ðŸ§ª Test Coverage (all layers tested)
```

### Module Structure
```
src/modules/[feature]/
â”œâ”€â”€ components/          # UI components
â”œâ”€â”€ hooks/              # Business logic hooks
â”œâ”€â”€ services/           # Data services
â”œâ”€â”€ stores/             # State management
â”œâ”€â”€ types/              # TypeScript definitions
â”œâ”€â”€ pages/              # Route components
â”œâ”€â”€ __tests__/          # Test files
â””â”€â”€ index.ts            # Public API
```

## Module Isolation Rules

### 1. Clear Boundaries
- Each module has single responsibility
- Modules communicate through well-defined interfaces
- No direct imports between module internals
- Public API exported through index.ts

### 2. Component Hierarchy
```typescript
// Page Component (Route level)
export function TodoPage() {
  return (
    <PageLayout>
      <TodoList />
    </PageLayout>
  );
}

// Container Component (Business logic)
export function TodoList() {
  const { todos, addTodo } = useTodos();
  return <TodoListView todos={todos} onAdd={addTodo} />;
}

// Presentation Component (Pure UI)
export function TodoListView({ todos, onAdd }) {
  return (
    <div>
      {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}
    </div>
  );
}
```

### 3. State Management
```typescript
// Feature-specific store
export interface TodoStore {
  // State
  todos: Todo[];
  loading: boolean;
  error: string | null;
  
  // Actions
  addTodo: (todo: CreateTodoRequest) => Promise<void>;
  updateTodo: (id: string, updates: Partial<Todo>) => Promise<void>;
  deleteTodo: (id: string) => Promise<void>;
}
```

## Performance Standards
- Individual modules: <100KB
- Component render time: <16ms
- State updates: <100ms
- Bundle splitting at route level
